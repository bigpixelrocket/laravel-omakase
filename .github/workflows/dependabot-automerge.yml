name: "Dependabot Automerge"

on:
  pull_request:

permissions:
  pull-requests: write
  contents: write

jobs:
  worker:
    runs-on: ubuntu-latest

    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Wait for status checks
        uses: actions/github-script@v7.1.0
        with:
          script: |
            const timeout = 600000; // 10 minutes
            const start = Date.now();

            while (true) {
              // Get all check runs with pagination
              const checks = await github.paginate(github.rest.checks.listForRef, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });

              // Look for our specific workflow runs
              const phpstan = checks.find(check =>
                check.name.toLowerCase().includes('phpstan')
              );
              const pint = checks.find(check =>
                check.name.toLowerCase().includes('pint')
              );
              const pest = checks.find(check =>
                check.name.toLowerCase().includes('pest')
              );

              // Check if all exist and are successful
              if (phpstan && pint && pest &&
                  phpstan.conclusion === 'success' &&
                  pint.conclusion === 'success' &&
                  pest.conclusion === 'success') {
                break;
              }

              // Check for failure conditions to fail fast
              if ((phpstan && phpstan.conclusion === 'failure') ||
                  (pint && pint.conclusion === 'failure') ||
                  (pest && pest.conclusion === 'failure')) {
                throw new Error('Required checks failed');
              }

              if (Date.now() - start > timeout) {
                throw new Error('Timeout waiting for checks');
              }

              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
            }

            // Now approve and merge
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            })

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'squash'
            })
          github-token: ${{ github.token }}
