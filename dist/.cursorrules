# Project Overview

You are building a Laravel/Livewire application ...

## Development Principles

You always think about problems and solutions carefully, step by step and you always follow best practices for writing clean and testable code with an emphasis on readability and maintainability. You write concise, technical responses with accurate PHP/Laravel/Livewire examples.

### Before Starting Any Task

1. Check current PHP/Laravel/Livewire/Flux/Tailwind versions in `composer.json` and `package.json`
2. Formulate a detailed implementation plan using syntax and features appropriate for the installed versions
3. Review and improve the implementation plan ensuring version compatibility
4. Implement using version-specific syntax and features
5. Test

**Version Awareness**

- Always check `composer.json` and `package.json` for actual installed versions
- Use syntax and features appropriate for the specific versions found
- Never assume latest versions - adapt to what's actually installed
- Pay special attention to packages with breaking changes

**Context7**

Use the Context7 MCP for documentation about version-specific syntaxt, features and APIs.

### PHP/Laravel Standards

#### Language & Coding Standards

**Code Style & Standards**

- Follow PSR-12 coding standards
- Use strict typing: `declare(strict_types=1);`

**Modern PHP Features & Type Safety**

- Use modern PHP 8.x features including union types, match expressions, attributes, constructor property promotion, readonly classes, the nullsafe operator, etc.
- Prefer type casting over magic class methods (e.g., `(array)` instead of `__toArray()`)

**Code Quality & Structure**

- Use descriptive variable, method, class and component names
- Prefer iteration and modularization over duplication

#### Framework & Architecture

**General Architecture Principles**

- Follow PHP/Laravel best practices and conventions but avoid too many abstractions
- Use Laravel's built-in features and helpers everywhere possible
- Favor dependency injection and service containers

**Data & Business Logic**

- Use the `spatie/laravel-data` package for DTOs (Data Transfer Objects) where appropriate, including for validation
- Let application logic handle relationships between models and tables instead of hard database constraints or foreign keys
- Use Repository classes in `app/Repositories` to decouple complex query logic from the business logic
- Use Action classes in `app/Actions` to encapsulate complex operations, promote code reuse, and maintain single responsibility principle across the application

**Request Handling & Validation**

- Use Laravel's named routes for defining or redirecting to application endpoints
- Implement proper request validation using Form Requests
- Implement middleware for request filtering and modification

**Security & Authorization**

- Use Laravel's built-in authentication and authorization features
- Utilize `spatie/laravel-permission` for role-based authorization

**Frontend Implementation Standards**

- Implement all user-facing features using Laravel Livewire components exclusively
- Use Laravel Flux UI components for all interface elements, layouts, and user interactions
- Never use plain HTML form elements - always use Flux equivalents (`flux:input`, `flux:button`, `flux:select`, etc.)
- Style components exclusively with Tailwind CSS utility classes and Flux's built-in theming system
- Avoid traditional Blade views with separate JavaScript files in favor of Livewire's reactive approach
- Leverage Flux components for consistent design patterns, accessibility standards, and modern UI/UX

**Laravel Flux UI Library**

- Always use `composer require livewire/flux` for installation and `composer update livewire/flux` for updates
- Include `@fluxAppearance` in `<head>` and `@fluxScripts` before `</body>` in your main layout files
- Configure Tailwind CSS with Flux imports: `@import '../../vendor/livewire/flux/dist/flux.css';`
- Use Flux Pro features when available with `php artisan flux:activate` for enhanced components
- Publish specific components only when customization is absolutely necessary with `php artisan flux:publish`

**Flux Component Architecture & Patterns**

- Follow Flux's component hierarchy: use `.group` suffix for grouped components (`flux:button.group`, `flux:input.group`)
- Use `.item` suffix for child components in collections (`flux:menu.item`, `flux:navbar.item`, `flux:navlist.item`)
- Understand component composition: many Flux components are designed to work together (e.g., `flux:dropdown` + `flux:menu`)
- Use consistent prop patterns: `variant`, `size`, `icon`, `color`, `disabled`, `loading` across compatible components
- Apply the `inset` prop for precise positioning without container stretching
- Use `kbd` prop for keyboard shortcut hints in buttons, tooltips, and menu items

**Flux Layout Components**

- Structure layouts using `flux:header`, `flux:sidebar`, `flux:main` for consistent page architecture
- Use `flux:brand` for company logos and names with consistent branding
- Implement navigation with `flux:navbar`, `flux:navlist`, and `flux:navmenu` components based on context
- Use `flux:spacer` for flexible layout spacing between elements
- Apply `sticky` and `stashable` props to headers and sidebars for responsive behavior

**Flux Form Components**

- Replace all HTML inputs with Flux equivalents: `flux:input`, `flux:textarea`, `flux:select`, `flux:checkbox`, `flux:radio`
- Use `flux:field`, `flux:label`, `flux:description`, and `flux:error` for complete form field composition
- Apply consistent `wire:model` binding to all form components for Livewire reactivity
- Use `variant` prop to apply different visual styles (`filled`, `outlined`, etc.)
- Add icons with `icon` and `icon:trailing` props rather than composing separate icon components
- Implement file uploads with `flux:input type="file"` with proper `wire:model` binding

**Flux Interactive Components**

- Use `flux:button` with appropriate `variant` props (`primary`, `destructive`, `ghost`, `subtle`)
- Implement dropdowns with `flux:dropdown` + `flux:menu` composition pattern
- Use `flux:modal` for dialog interfaces with proper `name` attributes for identification
- Apply `flux:tooltip` for contextual help and information
- Use `flux:badge` for status indicators, counts, and categorical labels
- Implement `flux:tabs` with proper `wire:model` for tab state management

**Flux Data Display Components**

- Use `flux:table` with `.column`, `.row`, and `.cell` components for structured data
- Apply `flux:card` for content grouping and visual hierarchy
- Use `flux:heading` and `flux:text` for consistent typography
- Implement `flux:avatar` for user representations with `src`, `name`, or `icon` props
- Use `flux:separator` for visual content division

**Flux Advanced Components**

- Implement `flux:command` for command palette interfaces with search and keyboard navigation
- Use `flux:autocomplete` for enhanced search and selection experiences
- Apply `flux:editor` for rich text editing with configurable toolbar options
- Use `flux:profile` for user information display in headers and sidebars

**Icons & Visual Elements**

- Use Flux's built-in Heroicons integration with `flux:icon.{name}` syntax
- Apply icon props (`icon`, `icon:trailing`) for simpler icon integration
- Use consistent icon variants (`mini`, `solid`, `outline`) across the application
- Leverage `flux:icon.loading` with `animate-spin` class for loading states

**Flux Theming & Customization**

- Use CSS custom properties for consistent theming across the application
- Apply Flux's built-in dark mode support with `$flux.appearance` Alpine.js integration
- Use Tailwind's utility classes that merge automatically with Flux's internal styling
- Apply `!important` modifier (`class="bg-red-500!"`) only when necessary to override Flux defaults
- Customize accent colors and base colors through CSS variables when needed
- Use Flux's responsive design patterns for mobile and desktop compatibility

**Laravel Livewire**

- Place Livewire components in the `App\Livewire` namespace (not `App\Http\Livewire`)
- Use `$this->dispatch()` for event dispatching instead of deprecated `$this->emit` or `$this->dispatchBrowserEvent`
- Reference layouts using `components.layouts.app` path instead of `layouts.app`
- Use `wire:model.live` for real-time binding (default `wire:model` is now deferred)
- Apply the same live binding approach to `@entangle` directives
- Wrap all Livewire component content within a single root `<div>` element
- Add custom styling to `resources/css/app.css` instead of inline styles in components
- Include `wire:key` attributes on the first element within loops (`@foreach`, `@for`, etc.) for proper component tracking
- Leverage Livewire's built-in Alpine.js bundle without manually including Alpine in `resources/js/app.js`
- Use `#[On('event-name')]` attributes for event listeners instead of the `protected $listeners` property
- Implement `wire:dirty` for styling unsaved/modified component states
- Utilize `wire:loading` to provide visual feedback during component actions
- Apply `wire:confirm` for user confirmation dialogs before destructive actions
- Don't use Livewire Volt (keep component PHP logic and Blade templates separate)

**Flux & Livewire Integration**

- Always bind Flux form components to Livewire properties with `wire:model` or `wire:model.live`
- Use Flux's automatic loading states with Livewire actions (`wire:click`, `wire:submit`)
- Apply `wire:loading` directives to Flux components for custom loading indicators
- Use Flux components in Livewire validation with proper `name` attributes
- Integrate Flux modals with Livewire component state for dynamic content
- Apply Flux's Alpine.js integration (`$flux.appearance`, `$flux.dark`) in Livewire components

#### Error Handling & User Experience

**Command Error Handling**

- Provide clear, actionable error messages
- Use Laravel's console output methods (info, warn, error)
- Implement graceful degradation for optional features
- Log errors appropriately without exposing sensitive information

**Process Management**

- Handle Symfony Process failures gracefully
- Provide progress indicators for long-running operations
- Allow users to skip failed steps and continue

#### Command Development Patterns

**Option Handling**

- Use Laravel's command option/argument methods
- Provide sensible defaults
- Validate options early in command execution

**File Operations**

- Use Laravel's File facade for file operations
- Always check if files exist before copying
- Provide backup mechanisms for overwritten files

**External Process Management**

- Use Symfony Process for shell commands
- Set appropriate timeouts
- Capture and handle both stdout and stderr

#### Performance & Security

**Process Optimization**

- Avoid unnecessary composer/npm operations
- Cache expensive operations when possible
- Use appropriate timeouts for external processes

**Security Considerations**

- Validate all user inputs and file paths
- Sanitize shell commands and arguments
- Never execute arbitrary user code
- Use Laravel's built-in security features

#### Documentation & Communication

**Code Documentation**

- Use PHPDoc blocks for all public methods
- Document complex logic with inline comments
- Keep README.md updated with usage examples

**User Communication**

- Write clear console output messages
- Provide helpful command descriptions and examples
- Use consistent terminology throughout

### Testing

**Testing Framework & Approach**

- Always read and follow the `TESTING.md` guide closely
- Use the Pest Framework exclusively for unit and feature tests
- Always write new tests or modify existing tests for any new or updated code
- Tests rely on Testbench to boot a minimal Laravel application so the package can run in isolation

**Code Quality & Standards**

- Enforce code style with Laravel Pint (configured in `pint.json`)
- Use PHPStan for static analysis (configured in `phpstan.neon`)

**Pre-commit Checks**

Run the following checks before committing anything:

**Pre-commit Workflow**
Run these commands in sequence before committing:

```bash
# 1. Fix code style issues second
php vendor/bin/pint

# 2. Check static analysis first
php vendor/bin/phpstan analyse

# 3. Verify tests still pass (with coverage)
php vendor/bin/pest --parallel --coverage --coverage-text --min=80

# 4. Make sure you read and followed the testing guide closely
cat TESTING.md
```

**Commit Standards**

- Use Conventional Commits format
- Write descriptive commit messages
- Keep commits atomic and focused

**Branch Strategy**

- Use feature branches for new functionality
- Ensure all tests pass before merging
- Squash commits when appropriate
